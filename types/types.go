// Code generated by soul. DO NOT EDIT.

package types

type UserProfileData struct {
	FirstName      string `json:"firstName,optional,omitempty"`
	LastName       string `json:"lastName,optional,omitempty"`
	AvatarURL      string `json:"avatarUrl,optional,omitempty"`
	AuthProvider   string `json:"authProvider,optional,omitempty"`   // e.g., "local", "google"
	AuthProviderID string `json:"authProviderId,optional,omitempty"` // ID from the provider
}

type User struct {
	ID               string          `json:"id"`
	Email            string          `json:"email" validate:"required,email"`
	ProfileData      UserProfileData `json:"profileData,optional,omitempty"` // Embed the profile data struct
	Role             string          `json:"role,optional,omitempty"`
	ApiKey           string          `json:"apiKey,optional,omitempty"`
	DefaultSubdomain string          `json:"defaultSubdomain"`
	AccountStatus    string          `json:"accountStatus,optional,omitempty"`
	CreatedAt        string          `json:"createdAt"`
	UpdatedAt        string          `json:"updatedAt"`
}

type LoginRequest struct {
	Email    string `json:"email" validate:"required,email"`
	Password string `json:"password" validate:"required"`
}

type LoginResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
	Token   string `json:"token"`
	User    User   `json:"user"`
}

type RegisterRequest struct {
	FirstName string `json:"firstName,optional,omitempty"`
	LastName  string `json:"lastName,optional,omitempty"`
	Email     string `json:"email" validate:"required,email"`
	Password  string `json:"password" validate:"required"`
}

type RegisterResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
	Token   string `json:"token"`
	User    User   `json:"user"`
}

type LoginCodeRequest struct {
	Email string `json:"email" validate:"required,email"`
}

type VerifyCodeRequest struct {
	Email string `json:"email" validate:"required,email"`
	Code  string `json:"code" validate:"required"`
}

type ResetPasswordRequest struct {
	Token    string `json:"token" validate:"required"`
	Password string `json:"password" validate:"required,min=8"`
}

type ChangeEmailRequest struct {
	NewEmail string `json:"newEmail" validate:"required,email"`
	Password string `json:"password" validate:"required"`
}

type BlogPost struct {
	ID          string     `json:"id"`
	Title       string     `json:"title"`
	Slug        string     `json:"slug"`
	Excerpt     string     `json:"excerpt,optional,omitempty"`
	Content     string     `json:"content"`
	Status      string     `json:"status"` // draft, published, archived
	IsFeatured  bool       `json:"isFeatured"`
	CoverImage  string     `json:"coverImage,optional,omitempty"`
	AuthorID    string     `json:"authorId"`
	Tags        []Tag      `json:"tags,optional,omitempty"`
	Categories  []Category `json:"categories,optional,omitempty"`
	ReadTime    int        `json:"readTime"` // Estimated read time in minutes
	ViewCount   int        `json:"viewCount"`
	LikeCount   int        `json:"likeCount"`
	PublishedAt string     `json:"publishedAt,optional,omitempty"`
	CreatedAt   string     `json:"createdAt"`
	UpdatedAt   string     `json:"updatedAt"`
}

type Tag struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	Slug string `json:"slug"`
}

type Category struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	Slug string `json:"slug"`
}

type Team struct {
	ID      string `json:"id,optional,omitempty"`
	Name    string `json:"name"`
	OwnerID string `json:"ownerId,optional,omitempty"`
}

type Membership struct {
	UserID string `json:"userId"`
	TeamID string `json:"teamId"`
	Role   string `json:"role"`
}

type Invitation struct {
	Email     string `json:"email"`
	TeamID    string `json:"teamId"`
	Role      string `json:"role"`
	Token     string `json:"token"`
	Status    string `json:"status"`
	ExpiresAt string `json:"expiresAt"`
}

type Plan struct {
	ID           string   `json:"id"`
	Name         string   `json:"name"`
	PriceMonthly float64  `json:"priceMonthly"`
	PriceYearly  float64  `json:"priceYearly,optional,omitempty"`
	Features     []string `json:"features"`
}

type Subscription struct {
	ID                 string `json:"id"`
	UserID             string `json:"userId"`
	PlanID             string `json:"planId"`
	Status             string `json:"status"`
	CurrentPeriodStart string `json:"currentPeriodStart"`
	CurrentPeriodEnd   string `json:"currentPeriodEnd"`
}

type Notification struct {
	ID        string `json:"id"`
	UserID    string `json:"userId"`
	Title     string `json:"title"`
	Body      string `json:"body"`
	Type      string `json:"type"`
	IsRead    bool   `json:"isRead"`
	CreatedAt string `json:"createdAt"`
}

type Response struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
}

type ApiKeyResponse struct {
	ApiKey string `json:"apiKey"`
}

type EmailPreferences struct {
	Marketing bool `json:"marketing"`
	Updates   bool `json:"updates"`
	Security  bool `json:"security"`
}

type SecuritySettings struct {
	TwoFactorEnabled   bool   `json:"twoFactorEnabled"`
	LastPasswordChange string `json:"lastPasswordChange"`
}

type APIUsageStats struct {
	RequestsToday      int `json:"requestsToday"`
	RequestsThisMonth  int `json:"requestsThisMonth"`
	RateLimitRemaining int `json:"rateLimitRemaining"`
}

type DashboardMetrics struct {
	TotalUsers          int `json:"totalUsers"`
	ActiveUsers         int `json:"activeUsers"`
	TotalTeams          int `json:"totalTeams"`
	ActiveSubscriptions int `json:"activeSubscriptions"`
}

type AddonRequest struct {
	AddonID string `path:"addonId"`
}

type AddAddonRequestBody struct {
	ItemType   string `json:"item_type" validate:"required,oneof=reserved_domain custom_domain"`
	ResourceID string `json:"resource_id" validate:"required,uuid"`
}

type AddonResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
	AddonID string `json:"addonId"`
}

type CheckoutSessionRequest struct {
	PlanID   string `json:"planId" validate:"required"`
	IsYearly bool   `json:"isYearly"`
}

type CheckoutSessionResponse struct {
	Success   bool   `json:"success"`
	Message   string `json:"message"`
	SessionID string `json:"sessionId"`
	URL       string `json:"url"`
}

type PortalSessionResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
	URL     string `json:"url"`
}

type InvoiceItem struct {
	ID        string  `json:"id"`
	Amount    float64 `json:"amount"`
	Currency  string  `json:"currency"`
	Status    string  `json:"status"`
	CreatedAt string  `json:"createdAt"`
}

type InvoiceResponse struct {
	Success  bool          `json:"success"`
	Message  string        `json:"message"`
	Invoices []InvoiceItem `json:"invoices"` // Use the named type
}

type TeamRequest struct {
	TeamID string `path:"teamId"`
	Email  string `json:"email" validate:"required,email"`
	Role   string `json:"role" validate:"required"`
}

type TeamMemberRequest struct {
	TeamID   string `path:"teamId"`
	MemberID string `path:"memberId"`
}

type TeamInvitationRequest struct {
	TeamID       string `path:"teamId"`
	InvitationID string `path:"invitationId"`
}

type InviteMemberRequest struct {
	TeamID string `path:"teamId"`                          // From path
	Email  string `json:"email" validate:"required,email"` // From body
	Role   string `json:"role" validate:"required"`        // From body
}

type UpdateMemberRoleRequest struct {
	TeamID   string `path:"teamId"`
	MemberID string `path:"memberId"`
	Role     string `json:"role" validate:"required,oneof=admin member"`
}

type InvitationTokenRequest struct {
	Token string `path:"token"`
}

type NotificationRequest struct {
	NotificationID string `path:"notificationId"`
}

type AdminUserRequest struct {
	UserID string `path:"userId"`
}

type SendCommunicationCombinedRequest struct {
	UserID string `path:"userId"`                   // From path
	Type   string `json:"type" validate:"required"` // e.g., "email", "note", "system"
	Title  string `json:"title" validate:"required"`
	Body   string `json:"body" validate:"required"`
}

type TeamResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
	Team    Team   `json:"team,optional,omitempty"`
}

type TeamMembersResponse struct {
	Success bool         `json:"success"`
	Message string       `json:"message"`
	Members []Membership `json:"members"`
}

type TeamMemberResponse struct {
	Success bool       `json:"success"`
	Message string     `json:"message"`
	Member  Membership `json:"member,optional,omitempty"`
}

type TeamInvitationsResponse struct {
	Success     bool         `json:"success"`
	Message     string       `json:"message"`
	Invitations []Invitation `json:"invitations"`
}

type InvitationResponse struct {
	Success    bool       `json:"success"`
	Message    string     `json:"message"`
	Invitation Invitation `json:"invitation,optional,omitempty"`
}

type NotificationResponse struct {
	Success      bool         `json:"success"`
	Message      string       `json:"message"`
	Notification Notification `json:"notification,optional,omitempty"`
}

type NotificationsResponse struct {
	Success       bool           `json:"success"`
	Message       string         `json:"message"`
	Notifications []Notification `json:"notifications"`
}

type AdminUserResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
	User    User   `json:"user,optional,omitempty"`
}

type AdminUserCommunicationsResponse struct {
	Success       bool           `json:"success"`
	Message       string         `json:"message"`
	Notifications []Notification `json:"notifications"`
}

type BlogListRequest struct {
	Page     int    `query:"page" validate:"min=1"`
	PerPage  int    `query:"perPage" validate:"min=1,max=100"`
	Sort     string `query:"sort" validate:"oneof=newest oldest popular featured"`
	Featured bool   `query:"featured,optional,omitempty"`
	Status   string `query:"status,optional,omitempty" validate:"oneof=draft published archived"`
	AuthorID string `query:"authorId,optional,omitempty"`
	Search   string `query:"search,optional,omitempty"`
}

type BlogPostRequest struct {
	Slug string `path:"slug"`
}

type BlogTagRequest struct {
	TagSlug string `path:"tagSlug"`
	Page    int    `query:"page" validate:"min=1"`
	PerPage int    `query:"perPage" validate:"min=1,max=100"`
}

type BlogCategoryRequest struct {
	CategorySlug string `path:"categorySlug"`
	Page         int    `query:"page" validate:"min=1"`
	PerPage      int    `query:"perPage" validate:"min=1,max=100"`
}

type GoogleResponse struct {
	Success     bool   `json:"success"`
	Message     string `json:"message"`
	RedirectURL string `json:"redirectUrl"`
}



type BlogPostResponse struct {
	Success bool     `json:"success"`
	Message string   `json:"message"`
	Post    BlogPost `json:"post,optional,omitempty"`
}

type BlogPostsResponse struct {
	Success bool       `json:"success"`
	Message string     `json:"message"`
	Posts   []BlogPost `json:"posts"`
	Total   int        `json:"total"`
	Page    int        `json:"page"`
	PerPage int        `json:"perPage"`
}

type Setting struct {
	Category    string `json:"category"`
	Key         string `json:"key"`
	Value       string `json:"value"`
	DataType    string `json:"dataType"`
	SortBy      int    `json:"sortBy"`
	Visibility  string `json:"visibility"`
	Description string `json:"description"`
}

type SettingRequest struct {
	Category    string `path:"category"`
	Key         string `path:"key"`
	Value       string `json:"value"`
	DataType    string `json:"dataType"`
	SortBy      int    `json:"sortBy"`
	Visibility  string `json:"visibility"`
	Description string `json:"description"`
}

type KnowledgeBaseArticle struct {
	ID        string   `json:"id"`
	Title     string   `json:"title" validate:"required"`
	Body      string   `json:"body" validate:"required"`
	Tags      []string `json:"tags,optional,omitempty"`
	Source    string   `json:"source,optional,omitempty"`
	IsActive  bool     `json:"isActive"`
	CreatedAt string   `json:"createdAt"`
	UpdatedAt string   `json:"updatedAt"`
}

type KnowledgeBaseArticleRequest struct {
	ID       string   `path:"id,optional,omitempty"`
	Title    string   `json:"title,optional,omitempty"`
	Body     string   `json:"body,optional,omitempty"`
	Tags     []string `json:"tags,optional,omitempty"`
	Source   string   `json:"source,optional,omitempty"`
	IsActive bool     `json:"isActive,optional,omitempty"`
}

type KnowledgeBaseSearchRequest struct {
	Query string `query:"query" validate:"required"`
}

type KnowledgeBaseArticleResponse struct {
	Success bool                 `json:"success"`
	Message string               `json:"message"`
	Article KnowledgeBaseArticle `json:"article,optional,omitempty"`
}

type KnowledgeBaseArticlesResponse struct {
	Success  bool                   `json:"success"`
	Message  string                 `json:"message"`
	Articles []KnowledgeBaseArticle `json:"articles"`
}
